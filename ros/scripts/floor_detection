#!/usr/bin/env python
import yaml
import rospy
from ropod_ros_msgs.msg import SmartWheelData

from floor_detection.floor_detector import FloorDetector
from floor_detection.srv import DetectFloor, DetectFloorResponse

class FloorDetectionNode(object):
    '''A ROS node exposing a floor detection functionality based on pressure
    sensor measurements from (potentially multiple) smart wheels.

    The number of redundant measurements, the window size of the detector's median filter,
    and the expected min/max measurement ranges corresponding to different floors
    are expected to be specified in a YAML configuration file in the following format:

    ---------------------------------------------------------------------------
    floor_detection_config:
    - floor_number: int
      min_measurement: float
      max_measurement: float
    - floor_number: int
      min_measurement: float
      max_measurement: float
    redundant_measurement_count: int
    filter_window_size: int
    ---------------------------------------------------------------------------

    The node expects the following parameters to be made available to the ROS parameter server:
    config_file_path: str -- configuration file for the floor detector
    server_name: str -- name of the floor detection service exposed by the node
    sw_data_topic: str -- name of a topic on which smart wheel data are published

    @author Alex Mitrevski
    @contact aleksandar.mitrevski@h-brs.de

    '''
    def __init__(self):
        config_file_path = rospy.get_param('~config_file', '')
        server_name = rospy.get_param('detection_server_name', 'floor_detection_server')
        sw_data_topic = rospy.get_param('sw_data_topic', '/sw_ethercat_parser/data')

        floor_measurement_ranges = {}
        redundant_measurement_count = 1
        filter_window_size = 5
        with open(config_file_path, 'r') as config_file:
            config = yaml.load(config_file)
            for floor_data in config['floor_measurement_limits']:
                ranges = (floor_data['min_measurement'], floor_data['max_measurement'])
                floor_measurement_ranges[floor_data['floor_number']] = ranges
            redundant_measurement_count = config['redundant_measurement_count']
            filter_window_size = config['filter_window_size']

        self.floor_detector = FloorDetector(floor_measurement_ranges,
                                            redundant_measurement_count,
                                            filter_window_size)

        self.sw_measurement_sub = rospy.Subscriber(sw_data_topic, SmartWheelData,
                                                   self.register_measurement_cb)

        self.floor_detection_server = rospy.Service(server_name, DetectFloor,
                                                    self.determine_floor_cb)

    def register_measurement_cb(self, sw_data):
        pressure_measurements = []
        for sensor_data in sw_data.sensors:
            pressure_measurements.append(sensor_data.pressure)
        self.floor_detector.register_measurements(pressure_measurements)

    def determine_floor_cb(self):
        current_floor = self.floor_detector.determine_floor()
        response = DetectFloorResponse()
        response.floor = current_floor
        return response

if __name__ == '__main__':
    rospy.init_node('floor_detection')
    floor_detection_node = FloorDetectionNode()
    rospy.spin()
